import logging
log = logging.getLogger(__name__)

from enaml.workbench.api import PluginManifest, Extension
from enaml.workbench.core.api import Command

import numpy as np

from psi.controller.engines.nidaq import (NIDAQEngine,
                                          NIDAQHardwareAIChannel,
                                          NIDAQHardwareAOChannel,
                                          NIDAQHardwareAOChannel4461,
                                          NIDAQHardwareCIAngPosEncoderChannel)
from psi.controller.api import ExperimentAction, Transform


def mv_to_C(mv):
    c = (mv-0.050)/0.020 + 35
    m = (c < 35) | (c > 40)
    c[m] = np.nan
    return c


START_TRIGGER = '/PXI1Slot6/ao/StartTrigger'
MAX_RANGE = (-5, 5)


def connect_trigger(event):
    '''
    Utility function that verifies that start trigger is set appropriately
    since some channels may be disabled.

    This needs to be explicitly hooked up in your IOManifest.
    '''
    # Since we want to make sure timing across all engines in the task are
    # synchronized properly, we need to inspect for the active channels and
    # then determine which device task is the one to syncrhonize all other
    # tasks to. We prioritize the last engine (the one that is started last)
    # and prioritize the analog output over the analog input. This logic may
    # change in the future.
    controller = event.workbench.get_plugin('psi.controller')

    ai_channels = []
    ao_channels = []
    ci_channels = []
    co_channels = []
    for engine in list(controller._engines.values())[::-1]:
        hw_ai = engine.get_channels(mode='analog', direction='in', timing='hw', active=True)
        hw_ao = engine.get_channels(mode='analog', direction='out', timing='hw', active=True)
        hw_ci = engine.get_channels(mode='counter', direction='in', timing='hw', active=True)
        hw_co = engine.get_channels(mode='counter', direction='out', timing='hw', active=True)
        ai_channels.extend(hw_ai)
        ao_channels.extend(hw_ao)
        ci_channels.extend(hw_ci)
        co_channels.extend(hw_co)

    # For now, we are ignoring the ci_channels and co_channels.
    channels = ai_channels + ao_channels + ci_channels

    # If no channels are active, we don't have any sync issues.
    if len(channels) == 0:
        log.info('No channels are active.')
        return

    # If only one channel is active, we don't have any sync issues.
    if len(channels) == 1:
        log.info('Only one channel active. Disabling start trigger.')
        channels[0].start_trigger = ''
        return

    # At least with the NI hardware I'm familiar with, counter channels require
    # an external clock (e.g., provided by an analog input our output task).
    # So, we cannot use the co_channel or ci_channel for setting the start trigger.
    if ao_channels:
        c = ao_channels[0]
        direction = 'ao'
    else:
        c = ai_channels[0]
        direction = 'ai'

    dev = c.channel.split('/', 1)[0]
    trigger = f'/{dev}/{direction}/StartTrigger'
    master_engine = None
    for c in channels:
        if dev in c.channel and direction in c.channel:
            log.info(f'Setting {c} start_trigger to ""')
            c.start_trigger = ''
            if master_engine is None:
                master_engine = c.engine
        else:
            log.info(f'Setting {c} start_trigger to "{trigger}"')
            c.start_trigger = trigger

    # Now, make sure the master engine is set to the one that controls the
    # start trigger.
    log.info('Setting master engine to %s', master_engine.name)
    controller._master_engine = master_engine


enamldef IOManifest(PluginManifest): manifest:

    Extension:
        id = 'ornitorinco_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'ornitorinco.connect_trigger'
            handler = connect_trigger

    Extension:
        id = 'ornitorinco_actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'ornitorinco.connect_trigger'
            weight = 90

    Extension:
        id = 'ornitorinco_backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            name = 'NI_misc'
            hw_ai_monitor_period = 0.125
            weight = 1

            NIDAQHardwareAIChannel:
                label = 'Grass P511'
                name = 'amplifier_grass'
                channel = 'PXI1Slot7/ai0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'DC'
                unit = 'V'

            NIDAQHardwareAIChannel:
                # Output is 50 mV at 35 degrees Centigrade, 150 mV at 40
                # degrees Centigrade. 25 mV/C between 35 and 40.
                label = 'Temperature'
                name = 'temperature_channel'
                channel = 'PXI1Slot7/ai1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'DC'
                unit = 'V'

                Transform:
                    name = 'temperature'
                    function = mv_to_C

        ########################################################
        # Starship A plus calibration mic.
        ########################################################
        NIDAQEngine:
            name = 'NI_audio_A'
            weight = 3

            hw_ai_monitor_period = 0.125
            hw_ao_monitor_period = 0.125
            hw_ao_buffer_size = 5

            NIDAQHardwareAOChannel4461:
                label = 'Starship A (primary)'
                name = 'starship_A_primary'
                channel = 'PXI1Slot6/ao0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-1, 1)
                max_range = MAX_RANGE
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'

            NIDAQHardwareAOChannel4461:
                label = 'Starship A (secondary)'
                name = 'starship_A_secondary'
                channel = 'PXI1Slot6/ao1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-1, 1)
                max_range = MAX_RANGE
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'

            NIDAQHardwareAIChannel:
                label = 'Starship A (microphone)'
                name = 'starship_A_microphone'
                channel = 'PXI1Slot6/ai1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'AC'

            NIDAQHardwareAIChannel:
                label = 'Calibration microphone'
                name = 'microphone_calibration'
                channel = 'PXI1Slot6/ai0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'AC'

        NIDAQEngine:
            name = 'NI_audio_B'
            weight = 3

            hw_ai_monitor_period = 0.125
            hw_ao_monitor_period = 0.125
            hw_ao_buffer_size = 5

            NIDAQHardwareAOChannel4461:
                label = 'Starship B (primary)'
                name = 'starship_B_primary'
                channel = 'PXI1Slot8/ao0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-1, 1)
                max_range = MAX_RANGE
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'

            NIDAQHardwareAOChannel4461:
                label = 'Starship B (secondary)'
                name = 'starship_B_secondary'
                channel = 'PXI1Slot8/ao1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-1, 1)
                max_range = MAX_RANGE
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'

            NIDAQHardwareAIChannel:
                label = 'Output Monitor'
                name = 'output_monitor'
                channel = 'PXI1Slot8/ai0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'DC'
                unit = 'V'

            NIDAQHardwareAIChannel:
                label = 'Starship B (microphone)'
                name = 'starship_B_microphone'
                channel = 'PXI1Slot8/ai1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'AC'

        NIDAQEngine:
            name = 'NI_pos_encoder'
            weight = 1

            NIDAQHardwareCIAngPosEncoderChannel:
                label = 'Turntable angle'
                name = 'turntable_angle'
                fs = 60
                pulses_per_revolution = 256
                channel = '/PXI1Slot5/Ctr0'
                terminal_A = '/PXI1Slot5/PFI1'
                terminal_B = '/PXI1Slot5/PFI2'
                clock_channel = '/PXI1Slot5/Ctr1'
